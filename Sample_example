import numpy as np
import matplotlib.pyplot as plt
import emcee

# Step 1: Generate Simulated Data
np.random.seed(42)  # For reproducibility
z = np.linspace(0, 2, 50)  # Redshift values from 0 to 2
true_hubble_constant = 70  # True Hubble constant (km/s/Mpc)
# Simulated distance with noise
distance = true_hubble_constant * z + np.random.normal(0, 5, size=z.shape)

# Step 2: Define the Model
def model(hubble_constant, z):
    return hubble_constant * z

# Step 3: Define the Log-Posterior Function
def log_posterior(hubble_constant, distance, z):
    if hubble_constant <= 0:
        return -np.inf  # Hubble constant must be positive
    predictions = model(hubble_constant, z)
    # Calculate the log likelihood
    return -0.5 * np.sum((distance - predictions) ** 2)

# Step 4: Set up the MCMC Sampler
nwalkers = 50
ndim = 1  # We're estimating one parameter: the Hubble constant
initial = np.random.uniform(50, 90, size=(nwalkers, ndim))  # Initial guesses

# Create the sampler
sampler = emcee.EnsembleSampler(nwalkers, ndim, log_posterior, args=(distance, z))

# Run MCMC
nsteps = 5000
sampler.run_mcmc(initial, nsteps)

# Step 5: Analyze the Results
samples = sampler.get_chain(discard=100, flat=True)
hubble_estimate = np.mean(samples)
hubble_std = np.std(samples)

print(f"Estimated Hubble Constant: {hubble_estimate:.2f} Â± {hubble_std:.2f} km/s/Mpc")

# Step 6: Plot the Results
plt.figure(figsize=(12, 6))
plt.subplot(2, 1, 1)
plt.plot(z, distance, 'o', label='Simulated Data', color='gray', markersize=5)
z_fit = np.linspace(0, 2, 100)
distance_fit = model(hubble_estimate, z_fit)
plt.plot(z_fit, distance_fit, label=f'Hubble Fit: {hubble_estimate:.2f} km/s/Mpc', color='blue')
plt.xlabel('Redshift (z)')
plt.ylabel('Distance (Mpc)')
plt.title('Simulated Distance vs Redshift')
plt.legend()

# Show the posterior distribution
plt.subplot(2, 1, 2)
plt.hist(samples, bins=30, density=True, color='gray', alpha=0.7)
plt.axvline(hubble_estimate, color='red', linestyle='--', label='Mean Estimate')
plt.title('Posterior Distribution of Hubble Constant')
plt.xlabel('Hubble Constant (km/s/Mpc)')
plt.ylabel('Density')
plt.legend()

plt.tight_layout()
plt.show()
